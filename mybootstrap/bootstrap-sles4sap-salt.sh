#!/bin/bash
echo "SUSE Manager Server Client bootstrap script v4.0"

# This file was autogenerated. Minor manual editing of this script (and
# possibly the client-config-overrides.txt file) may be necessary to complete
# the bootstrap setup. Once customized, the bootstrap script can be triggered
# in one of two ways (the first is preferred):
#
#   (1) centrally, from the SUSE Manager Server via ssh (i.e., from the
#       SUSE Manager Server):
#         cd /srv/www/htdocs/pub/bootstrap/
#         cat bootstrap-<edited_name>.sh | ssh root@<client-hostname> /bin/bash
#
#   ...or...
#
#   (2) in a decentralized manner, executed on each client, via wget or curl:
#         wget -qO- https://<hostname>/pub/bootstrap/bootstrap-<edited_name>.sh | /bin/bash
#         ...or...
#         curl -Sks https://<hostname>/pub/bootstrap/bootstrap-<edited_name>.sh | /bin/bash

# SECURITY NOTE:
#   Use of these scripts via the two methods discussed is the most expedient
#   way to register machines to your SUSE Manager Server. Since "wget" is used
#   throughout the script to download various files, a "Man-in-the-middle"
#   attack is theoretically possible.
#
#   The actual registration process is performed securely via SSL, so the risk
#   is minimized in a sense. This message merely serves as a warning.
#   Administrators need to appropriately weigh their concern against the
#   relative security of their internal network.

# PROVISIONING/KICKSTART NOTE:
#   If provisioning a client, ensure the proper CA SSL public certificate is
#   configured properly in the post section of your kickstart profiles (the
#   SUSE Manager Server or hosted web user interface).

# UP2DATE/RHN_REGISTER VERSIONING NOTE:
#   This script will not work with very old versions of up2date and
#   rhn_register.


echo
echo
echo "MINOR MANUAL EDITING OF THIS FILE MAY BE REQUIRED!"
echo
echo "If this bootstrap script was created during the initial installation"
echo "of a SUSE Manager Server, the ACTIVATION_KEYS, and ORG_GPG_KEY values will"
echo "probably *not* be set (see below). If this is the case, please do the"
echo "following:"
echo "  - copy this file to a name specific to its use."
echo "    (e.g., to bootstrap-SOME_NAME.sh - like bootstrap-web-servers.sh.)"
echo "  - on the website create an activation key or keys for the system(s) to"
echo "    be registered."
echo "  - edit the values of the VARIABLES below (in this script) as"
echo "    appropriate:"
echo "    - ACTIVATION_KEYS needs to reflect the activation key(s) value(s)"
echo "      from the website. XKEY or XKEY,YKEY"
echo "      Please note that if you are using this script to boostrap minions,"
echo "      only the FIRST activation key will be used. Multiple activation keys"
echo "      are not supported with salt"
echo "    - ORG_GPG_KEY needs to be set to the name(s) of the corporate public"
echo "      GPG key filename(s) (residing in /srv/www/htdocs/pub) if appropriate. XKEY or XKEY,YKEY"
echo
echo "Verify that the script variable settings are correct:"
echo "    - CLIENT_OVERRIDES should be only set differently if a customized"
echo "      client-config-overrides-VER.txt file was created with a different"
echo "      name."
echo "    - ensure the value of HOSTNAME is correct."
echo "    - ensure the value of ORG_CA_CERT is correct."
echo
echo "Enable this script: comment (with #'s) this block (or, at least just"
echo "the exit below)"
echo
 

# can be edited, but probably correct (unless created during initial install):
# NOTE: ACTIVATION_KEYS *must* be used to bootstrap a client machine.
ACTIVATION_KEYS=1-sles4sap
ORG_GPG_KEY=
SERVER_ROLE=general

# can be edited, but probably correct:
CLIENT_OVERRIDES=client-config-overrides.txt
HOSTNAME=bjsuma.bo2go.home

ORG_CA_CERT=rhn-org-trusted-ssl-cert-1.0-1.noarch.rpm
ORG_CA_CERT_IS_RPM_YN=1

USING_SSL=1
USING_GPG=1

REGISTER_THIS_BOX=1

ALLOW_CONFIG_ACTIONS=0
ALLOW_REMOTE_COMMANDS=0

FULLY_UPDATE_THIS_BOX=0

# Set if you want to specify profilename for client systems.
# NOTE: Make sure it's set correctly if any external command is used.
#
# ex. PROFILENAME="foo.example.com"  # For specific clinet system
#     PROFILENAME=`hostname -s`      # Short hostname
#     PROFILENAME=`hostname -f`      # FQDN
PROFILENAME=""   # Empty by default to let it be set automatically.

# After registration, before updating the system (or at least the installer)
# disable all repos not provided by SUSE Manager.
DISABLE_LOCAL_REPOS=1

# Disable yasts automatic online update feature in case it is enabled
# on the client. Leaving automatic online update enabled, the client would
# continue to update himself independently from SUSE Manager requests.
DISABLE_YAST_AUTOMATIC_ONLINE_UPDATE=1

# SUSE Manager Specific settings:
#
# - Alternate location of the client tool repos providing the zypp-plugin-spacewalk
# and packges required for registration. Unless they are already installed on the
# client this repo is expected to provide them for SLE-10/SLE-11 based clients:
#   ${Z_CLIENT_REPOS_ROOT}/sle/VERSION/PATCHLEVEL
# If empty, the SUSE Manager repositories provided at https://${HOSTNAME}/pub/repositories
# are used.
Z_CLIENT_REPOS_ROOT=

#
# -----------------------------------------------------------------------------
# DO NOT EDIT BEYOND THIS POINT -----------------------------------------------
# -----------------------------------------------------------------------------
#

#
# do not try to register a SUSE Manager server at itself
#
MYNAME=`hostname -f`
LCMYNAME=`echo $MYNAME | tr '[:upper:]' '[:lower:]'`
LCHOSTNAME=`echo $HOSTNAME | tr '[:upper:]' '[:lower:]'`

if [ $LCMYNAME == $LCHOSTNAME ]; then
    echo "Name of client and of SUSE Manager server are the same."
    echo "Do not try to register a SUSE Manager server at itself!"
    echo "Aborting."
    exit 1
fi


#
# maybe autoyast has written a tracking key for us
#
if [ -f "/var/adm/autoinstall/cache/SUSE_Manager_keys" ]; then
    . /var/adm/autoinstall/cache/SUSE_Manager_keys
    if [ "x$redhat_management_key" != "x" ]; then
        ACTIVATION_KEYS="$ACTIVATION_KEYS,$redhat_management_key"
    fi

    if [ "x$registration_key" != "x" ]; then
        ACTIVATION_KEYS="$ACTIVATION_KEYS,$registration_key"
    fi

    # remove leading ','
    ACTIVATION_KEYS=${ACTIVATION_KEYS#,}
fi


# an idea from Erich Morisse (of Red Hat).
# use either wget *or* curl
# Also check to see if the version on the
# machine supports the insecure mode and format
# command accordingly.

if [ -x /usr/bin/wget ] ; then
    output=`LANG=en_US /usr/bin/wget --no-check-certificate 2>&1`
    error=`echo $output | grep "unrecognized option"`
    if [ -z "$error" ] ; then
        FETCH="/usr/bin/wget -nv -r -nd --no-check-certificate"
    else
        FETCH="/usr/bin/wget -nv -r -nd"
    fi
elif [ -x /usr/bin/curl ] ; then
    output=`LANG=en_US /usr/bin/curl -k 2>&1`
    error=`echo $output | grep "is unknown"`
    if [ -z "$error" ] ; then
        FETCH="/usr/bin/curl -ksSOf"
    else
        FETCH="/usr/bin/curl -sSOf"
    fi
else
    echo "To be able to download files, please install either 'wget' or 'curl'"
    exit 1
fi

HTTP_PUB_DIRECTORY=http://${HOSTNAME}/pub
HTTPS_PUB_DIRECTORY=https://${HOSTNAME}/pub
if [ $USING_SSL -eq 0 ] ; then
    HTTPS_PUB_DIRECTORY=${HTTP_PUB_DIRECTORY}
fi

INSTALLER=up2date
if [ -x /usr/bin/zypper ] ; then
    INSTALLER=zypper
elif [ -x /usr/bin/yum ] ; then
    INSTALLER=yum
fi

if [ ! -w . ] ; then
    echo ""
    echo "*** ERROR: $(pwd):"
    echo "    No permission to write to the current directory."
    echo "    Please execute this script in a directory where downloaded files can be stored."
    echo ""
    exit 1
fi
echo
echo "UPDATING RHN_REGISTER/UP2DATE CONFIGURATION FILES"
echo "-------------------------------------------------"
echo "* downloading necessary files"
echo "  client_config_update.py..."
rm -f client_config_update.py
$FETCH ${HTTPS_PUB_DIRECTORY}/bootstrap/client_config_update.py
echo "  ${CLIENT_OVERRIDES}..."
rm -f ${CLIENT_OVERRIDES}
$FETCH ${HTTPS_PUB_DIRECTORY}/bootstrap/${CLIENT_OVERRIDES}

if [ ! -f "client_config_update.py" ] ; then
    echo "ERROR: client_config_update.py was not downloaded"
    exit 1
fi
if [ ! -f "${CLIENT_OVERRIDES}" ] ; then
    echo "ERROR: ${CLIENT_OVERRIDES} was not downloaded"
    exit 1
fi

echo
echo "PREPARE GPG KEYS AND CORPORATE PUBLIC CA CERT"
echo "-------------------------------------------------"
if [ ! -z "$ORG_GPG_KEY" ] ; then
    echo
    echo "* importing organizational GPG keys"
    for GPG_KEY in $(echo "$ORG_GPG_KEY" | tr "," " "); do
        rm -f ${GPG_KEY}
        $FETCH ${HTTPS_PUB_DIRECTORY}/${GPG_KEY}
        # get the major version of up2date
        # this will also work for RHEL 5 and systems where no up2date is installed
        res=$(LC_ALL=C rpm -q --queryformat '%{version}' up2date | sed -e 's/\..*//g')
        if [ "x$res" == "x2" ] ; then
            gpg $(up2date --gpg-flags) --import $GPG_KEY
        else
            rpm --import $GPG_KEY
        fi
    done
else
    echo "* no organizational GPG keys to import"
fi

echo
if [ $USING_SSL -eq 1 ] ; then

    CERT_DIR=/usr/share/rhn
    TRUST_DIR=/etc/pki/ca-trust/source/anchors
    UPDATE_TRUST_CMD="/usr/bin/update-ca-trust extract"

    if [  $ORG_CA_CERT_IS_RPM_YN -eq 1 ] ; then
      # get name from config
      CERT_FILE=$(basename $(sed -n 's/^sslCACert *= *//p' "${CLIENT_OVERRIDES}"))
    else
      CERT_FILE=${ORG_CA_CERT}
    fi

    function updateCertificates() {
        if [ -d /etc/pki/ca-trust/source/anchors ]; then
            TRUST_DIR=/etc/pki/ca-trust/source/anchors
        elif [ -d /etc/pki/trust/anchors/ -a -x /usr/sbin/update-ca-certificates ]; then
            # SLE 12
            TRUST_DIR=/etc/pki/trust/anchors
            UPDATE_TRUST_CMD="/usr/sbin/update-ca-certificates"
        elif [ -d /etc/ssl/certs -a -x /usr/bin/c_rehash ]; then
            # SLE 11
            TRUST_DIR=/etc/ssl/certs
            UPDATE_TRUST_CMD="/usr/bin/c_rehash"
            rm -f $TRUST_DIR/RHN-ORG-TRUSTED-SSL-CERT.pem
            rm -f $TRUST_DIR/RHN-ORG-TRUSTED-SSL-CERT-*.pem
            if [ -f $CERT_DIR/$CERT_FILE ]; then
                ln -sf $CERT_DIR/$CERT_FILE $TRUST_DIR/RHN-ORG-TRUSTED-SSL-CERT.pem
                if [ $(grep -- "-----BEGIN CERTIFICATE-----" $CERT_DIR/$CERT_FILE | wc -l) -gt 1 ]; then
                    csplit -b "%02d.pem" -f $TRUST_DIR/RHN-ORG-TRUSTED-SSL-CERT- $CERT_DIR/$CERT_FILE '/-----BEGIN CERTIFICATE-----/' '{*}'
                fi
            fi
            $UPDATE_TRUST_CMD >/dev/null
            return
        fi

        if [ ! -d $TRUST_DIR ]; then
            return
        fi

        if [ -f $CERT_DIR/$CERT_FILE ]; then
            ln -sf $CERT_DIR/$CERT_FILE $TRUST_DIR
        else
            rm -f $TRUST_DIR/$CERT_FILE
        fi

        $UPDATE_TRUST_CMD
    }

    echo "* attempting to install corporate public CA cert"

    test -d ${CERT_DIR} || mkdir -p ${CERT_DIR}
    rm -f ${ORG_CA_CERT}
    $FETCH ${HTTPS_PUB_DIRECTORY}/${ORG_CA_CERT}

    if [ $ORG_CA_CERT_IS_RPM_YN -eq 1 ] ; then
        rpm -Uvh --force --replacefiles --replacepkgs ${ORG_CA_CERT}
        rm -f ${ORG_CA_CERT}
    else
        mv ${ORG_CA_CERT} ${CERT_DIR}
    fi

    if [  $ORG_CA_CERT_IS_RPM_YN -eq 0 ] ; then
        # symlink & update certificates is already done in rpm post-install script
        # no need to be done again if we have installed rpm
        echo "* update certificates"
        updateCertificates
    fi
else
    echo "* configured not to use SSL: don't install corporate public CA cert"
fi

echo
echo "CHECKING THE REGISTRATION STACK"
echo "-------------------------------------------------"
if [ "$INSTALLER" == yum ]; then
    function getY_CLIENT_CODE_BASE() {
        local BASE=""
        local VERSION=""
        if [ -f /etc/redhat-release ]; then
            grep -v '^#' /etc/redhat-release | grep -q '\(CentOS\|Red Hat\)' && BASE="res"
            VERSION=`grep -v '^#' /etc/redhat-release | grep -Po '(?<=release )\d+'`
        fi
        Y_CLIENT_CODE_BASE="${BASE:-unknown}"
        Y_CLIENT_CODE_VERSION="${VERSION:-unknown}"
    }

    function getY_MISSING() {
        local NEEDED="salt salt-minion"
        Y_MISSING=""
        for P in $NEEDED; do
            rpm -q "$P" || Y_MISSING="$Y_MISSING $P"
        done
    }

    echo "* check for necessary packages being installed..."
    getY_CLIENT_CODE_BASE
    echo "* client codebase is ${Y_CLIENT_CODE_BASE}-${Y_CLIENT_CODE_VERSION}"
    getY_MISSING

    if [ -z "$Y_MISSING" ]; then
        echo "  no packages missing."
    else
        echo "* going to install missing packages..."
        Y_CLIENT_REPOS_ROOT="${Y_CLIENT_REPOS_ROOT:-https://${HOSTNAME}/pub/repositories}"
        Y_CLIENT_REPO_URL="${Y_CLIENT_REPOS_ROOT}/${Y_CLIENT_CODE_BASE}/${Y_CLIENT_CODE_VERSION}/bootstrap"
        Y_CLIENT_REPO_NAME="susemanager:bootstrap.repo"
        Y_CLIENT_REPO_FILE="/etc/yum.repos.d/$Y_CLIENT_REPO_NAME.repo"

        # test, if repo exists
        $FETCH $Y_CLIENT_REPO_URL/repodata/repomd.xml
        if [ ! -f "repomd.xml" ] ; then
            echo "Bootstrap repo '$Y_CLIENT_REPO_URL' does not exist."
            Y_CLIENT_REPO_URL=""
        fi
        rm -f repomd.xml

        if [ -n "$Y_CLIENT_REPO_URL" ]; then
            echo " adding client software repository at $Y_CLIENT_REPO_URL"
            cat <<EOF >"$Y_CLIENT_REPO_FILE"
[$Y_CLIENT_REPO_NAME]
name=$Y_CLIENT_REPO_NAME
baseurl=$Y_CLIENT_REPO_URL
enabled=1
autorefresh=1
keeppackages=0
EOF
        fi

        yum -y install $Y_MISSING

        for P in $Y_MISSING; do
            rpm -q "$P" || {
            echo "ERROR: Failed to install all missing packages."
            exit 1
        }
        done

        # remove client bootstrap repo
        rm $Y_CLIENT_REPO_FILE
    fi
fi
if [ "$INSTALLER" == zypper ]; then
  function getZ_CLIENT_CODE_BASE() {
    local BASE=""
    local VERSION=""
    local PATCHLEVEL=""
    test -r /etc/SuSE-release && {
      grep -q 'Enterprise' /etc/SuSE-release && BASE="sle"
      eval $(grep '^\(VERSION\|PATCHLEVEL\)' /etc/SuSE-release | tr -d '[:blank:]')
    }
    Z_CLIENT_CODE_BASE="${BASE:-unknown}"
    Z_CLIENT_CODE_VERSION="${VERSION:-unknown}"
    Z_CLIENT_CODE_PATCHLEVEL="${PATCHLEVEL:-0}"
  }

  function getZ_MISSING() {
    local NEEDED="salt salt-minion"
    if [ "$Z_CLIENT_CODE_BASE" == "sle" -a "$Z_CLIENT_CODE_VERSION" == "10" ]; then
      # (bnc#789373) Code 10 product migration requires 'xsltproc' being installed
      which 'xsltproc' || NEEDED="$NEEDED libxslt"
    fi
    Z_MISSING=""
    for P in $NEEDED; do
      rpm -q "$P" || Z_MISSING="$Z_MISSING $P"
    done
  }

  function getZ_ZMD_TODEL() {
    local ZMD_STACK="zmd rug libzypp-zmd-backend yast2-registration zen-updater zmd-inventory suseRegister-jeos"
    if rpm -q suseRegister --qf '%{VERSION}' | grep -q '^\(0\.\|1\.[0-3]\)\(\..*\)\?$'; then
      # we need the new suseRegister >= 1.4, so wipe an old one too
      ZMD_STACK="$ZMD_STACK suseRegister suseRegisterInfo spacewalk-client-tools"
    fi
    Z_ZMD_TODEL=""
    for P in $ZMD_STACK; do
      rpm -q "$P" && Z_ZMD_TODEL="$Z_ZMD_TODEL $P"
    done
  }

  echo "* check for necessary packages being installed..."
  # client codebase determines repo url to use and whether additional
  # preparations are needed before installing the missing packages.
  getZ_CLIENT_CODE_BASE
  echo "* client codebase is ${Z_CLIENT_CODE_BASE}-${Z_CLIENT_CODE_VERSION}-sp${Z_CLIENT_CODE_PATCHLEVEL}"

  getZ_MISSING
  if [ -z "$Z_MISSING" ]; then
    echo "  no packages missing."
  else
    echo "* going to install missing packages..."
    Z_CLIENT_REPOS_ROOT="${Z_CLIENT_REPOS_ROOT:-https://${HOSTNAME}/pub/repositories}"
    Z_CLIENT_REPO_URL="${Z_CLIENT_REPOS_ROOT}/${Z_CLIENT_CODE_BASE}/${Z_CLIENT_CODE_VERSION}/${Z_CLIENT_CODE_PATCHLEVEL}/bootstrap"
    test "${Z_CLIENT_CODE_BASE}/${Z_CLIENT_CODE_VERSION}/${Z_CLIENT_CODE_PATCHLEVEL}" = "sle/11/1" && {
      # use backward compatible URL for SLE11-SP1 repo
      Z_CLIENT_REPO_URL="${Z_CLIENT_REPOS_ROOT}/susemanager-client-setup"
    }
    Z_CLIENT_REPO_NAME="susemanager-client-setup"
    Z_CLIENT_REPO_FILE="/etc/zypp/repos.d/$Z_CLIENT_REPO_NAME.repo"

    # test, if repo exists
    $FETCH $Z_CLIENT_REPO_URL/repodata/repomd.xml
    if [ ! -f "repomd.xml" ] ; then
        echo "Bootstrap repo '$Z_CLIENT_REPO_URL' does not exist."
        Z_CLIENT_REPO_URL=""
    fi
    rm -f repomd.xml

    # code10 requires removal of the ZMD stack first
    if [ "$Z_CLIENT_CODE_BASE" == "sle" ]; then
      if [ "$Z_CLIENT_CODE_VERSION" = "10" ]; then
	echo "* check whether to remove the ZMD stack first..."
	getZ_ZMD_TODEL
	if [ -z "$Z_ZMD_TODEL" ]; then
	  echo "  ZMD stack is not installed. No need to remove it."
	else
	  echo "  Disable and remove the ZMD stack..."
	  # stop any running zmd
	  if [ -x /usr/sbin/rczmd ]; then
	    /usr/sbin/rczmd stop
	  fi
	  rpm -e --nodeps $Z_ZMD_TODEL || {
	    echo "ERROR: Failed remove the ZMD stack."
	    exit 1
	  }
	fi
      fi
    fi

    # way to add the client software repository depends on the zypp version actually
    # installed (original code 10 via 'zypper sa', or code 11 like via .repo files)
    #
    # Note: We try to install the missing packages even if adding the repo fails.
    # Might be some other system repo provides them instead.
    if rpm -q zypper --qf '%{VERSION}' | grep -q '^0\(\..*\)\?$'; then

      # code10 zypper has no --gpg-auto-import-keys and no reliable return codes.
      if [ -n "$Z_CLIENT_REPO_URL" ]; then
        echo "  adding client software repository at $Z_CLIENT_REPO_URL"
        zypper --non-interactive --no-gpg-checks sd $Z_CLIENT_REPO_NAME
        zypper --non-interactive --no-gpg-checks sa $Z_CLIENT_REPO_URL $Z_CLIENT_REPO_NAME
        zypper --non-interactive --no-gpg-checks refresh "$Z_CLIENT_REPO_NAME"
      fi
      zypper --non-interactive --no-gpg-checks in $Z_MISSING
      for P in $Z_MISSING; do
	rpm -q "$P" || {
	  echo "ERROR: Failed to install all missing packages."
	  exit 1
	}
      done
      if [ -n "$Z_CLIENT_REPO_URL" ]; then
        # Now as code11 zypper is installed, create the .repo file
        cat <<EOF >"$Z_CLIENT_REPO_FILE"
[$Z_CLIENT_REPO_NAME]
name=$Z_CLIENT_REPO_NAME
baseurl=$Z_CLIENT_REPO_URL
enabled=1
autorefresh=1
keeppackages=0
gpgcheck=0
EOF
      fi
    else

      if [ -n "$Z_CLIENT_REPO_URL" ]; then
        echo "  adding client software repository at $Z_CLIENT_REPO_URL"
        cat <<EOF >"$Z_CLIENT_REPO_FILE"
[$Z_CLIENT_REPO_NAME]
name=$Z_CLIENT_REPO_NAME
baseurl=$Z_CLIENT_REPO_URL
enabled=1
autorefresh=1
keeppackages=0
gpgcheck=0
EOF
        zypper --non-interactive --gpg-auto-import-keys refresh "$Z_CLIENT_REPO_NAME"
      fi
      # install missing packages
      zypper --non-interactive in $Z_MISSING
      for P in $Z_MISSING; do
	rpm -q "$P" || {
	  echo "ERROR: Failed to install all missing packages."
	  exit 1
	}
      done

    fi
  # remove client bootstrap repo
  zypper rr "$Z_CLIENT_REPO_NAME"
  fi

  # on code10 we need to convert metadata of installed products
  if [ "$Z_CLIENT_CODE_BASE" == "sle" ]; then
    if [ "$Z_CLIENT_CODE_VERSION" = "10" ]; then
      test -e "/usr/share/zypp/migrate/10-11.migrate.products.sh" && {
	echo "* check whether we have to to migrate metadata..."
	sh /usr/share/zypp/migrate/10-11.migrate.products.sh || {
	  echo "ERROR: Failed to migrate product metadata."
	  exit 1
	}
      }
    fi
  fi
fi

function removeTLSCertificate() {
    CERT_DIR=/usr/share/rhn
    TRUST_DIR=/etc/pki/ca-trust/source/anchors
    UPDATE_TRUST_CMD="/usr/bin/update-ca-trust extract"

    if [ $ORG_CA_CERT_IS_RPM_YN -eq 1 ] ; then
        CERT_FILE=$(basename $(sed -n 's/^sslCACert *= *//p' "${CLIENT_OVERRIDES}"))
        rpm -e `basename ${ORG_CA_CERT} .rpm`
    else
        CERT_FILE=${ORG_CA_CERT}
        rm -f /usr/share/rhn/${ORG_CA_CERT}
    fi
    updateCertificates
}

    echo
echo "REGISTRATION"
echo "------------"
# Should have created an activation key or keys on the SUSE Manager Server's
# website and edited the value of ACTIVATION_KEYS above.
#
# If you require use of several different activation keys, copy this file and
# change the string as needed.
#

MINION_ID_FILE="/etc/salt/minion_id"
SUSEMANAGER_MASTER_FILE="/etc/salt/minion.d/susemanager.conf"

if [ $REGISTER_THIS_BOX -eq 1 ] ; then
    echo "* registering"

    echo "$MYNAME" > "$MINION_ID_FILE"
    echo "master: $HOSTNAME" > "$SUSEMANAGER_MASTER_FILE"
    if [ -f /tmp/grains.txt ] ; then
       SERVER_ROLE=`cat /tmp/grains.txt`
    fi
    if [ -n "$ACTIVATION_KEYS" ] ; then
        cat <<EOF >>"$SUSEMANAGER_MASTER_FILE"
grains:
    susemanager:
        activation_key: "$(echo $ACTIVATION_KEYS | cut -d, -f1)"
    server_role:
        $SERVER_ROLE
EOF
    fi
fi

echo "* removing TLS certificate used for bootstrap"
echo "  (will be re-added via salt state)"

removeTLSCertificate

echo "* starting salt daemon and enabling it during boot"

if [ -f /usr/lib/systemd/system/salt-minion.service ] ; then
    systemctl enable salt-minion
    systemctl start salt-minion
else
    /etc/init.d/salt-minion start
    /sbin/chkconfig --add salt-minion
fi
echo "-bootstrap complete-"
